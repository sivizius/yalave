format                                  ELF64                                   executable
use64
entry                                   _start_

__debug__                               fix                                     true
;__debug__                               fix                                     false

__tmp2__                                fix                                     r12
__tmp3__                                fix                                     r13
__tmp4__                                fix                                     r14
__tmp5__                                fix                                     r15
__tmpA__                                fix                                     rax
__tmpB__                                fix                                     rbx

__yentry__                              fix                                     r14

__page__                                fix                                     r15
__file__                                fix                                     r15
macro debugCUID                         _cuid_
{
  mov                                   rax,                                    _cuid_
  call                                  .lCUID
  mov                                   rbx,                                    _cuid_
  mov                                   rdi,                                    qword [ rax + 0 ]
  bswap                                 rdi
  mov                                   rsi,                                    qword [ rax + 8 ]
  bswap                                 rsi
  echo_state
}

;( import )
;{
  include                               'libs/main.fasm'
  xstat                                 'main'
  xstat                                 'buffers'
  ;xstat                                 'data'
  xstat                                 'echo'
  xstat                                 'environment'
  xstat                                 'files'
  xstat                                 'machine'
  xstat                                 'on'
  ;xstat                                 'vars'
  xstat                                 'yapter'
  stat                                  'main'
;}
segment                                 executable
  _base_                                =                                       0x0000000000000000
  display 'code: 0x'
  displayHex ( $ )
  display 10
  _start_:
    mov                                 rbp,                                    rsp
    ;lea                                 rax,                                    [ _base_ ]
    ;add                                 qword [ addBase0 ],                     rax
    ;add                                 qword [ addBase1 ],                     rax
    ;add                                 qword [ buffers.list ],                 rax
  code                                  'main'
  xcode                                 'buffers'
  xcode                                 'echo'
  xcode                                 'environment'
  xcode                                 'files'
  xcode                                 'threads'
  xcode                                 'time'
  code                                  'yapter'
;  code                                  'sba'
  times ( 0x1000 - ( $ and 0xfff ))     db                                      0x90
segment                                 readable  writeable
  display                               'data: 0x'
  displayHex                            ( $ )
  display                               10
  ;*page -> strucBuffersPage
  ;{
  ;:  0x00 .next                        cq -> strucBuffersPage                  *next_page -> ... -> NULL
  ;:  0x08 .stop                        cq -> void                              ( *page + page_size )
  ;:  0x10 .here                        dq -> strucBuffers                      *new_buffer in { [ *page, *page + page_size - 2 ], NULL }
  ;:  0x18 .last                        dq -> strucBuffers                      *last
  ;:  0x20 .full                        cw                                      page_size = ( meta_size + used_size + spam_size + free_size )
  ;:  0x22 .free                        dw                                      free_size
  ;:  0x24 .used                        dw                                      used_size
  ;:  0x26 .spam                        dw                                      spam_size
  ;:  0x28 .                            db[ page_size - meta_size ]             content -> { buffer0, ..., bufferN } -> strucItem
  ;}
  ;{
    _base_                              =                                       ( $ and 0xfffffffffffff000 )
                                        dq                                      0x0000000000000000
    addBase0                            dq                                      ( _base_ + _length_ )
    addBase1                            dq                                      ( _here_ )
                                        dq                                      0x0000000000000000
                                        dw                                      ( buffers.lenFull )
                                        dw                                      ( _base_ + _length_ - _here_ )
                                        dw                                      ( _here_ - _base_ - buffers.lenMeta )
                                        dw                                      0x0000
  ;}
  _cobj_                                =                                       1
  ;( text )
  ;{
    xtext                               'buffers'
    xtext                               'echo'
    xtext                               'environment'
    xtext                               'files'
    xtext                               'symbols'
    xtext                               'threads'
    text                                'main'
    text                                'yalib'
    text                                'yapter'
  ;}
                                        dw                                      ( _here_ - $ )
  ;( vars )
  ;{
    buffers.list                        dq                                      ( _base_ )
    buffers.full                        dd                                      ( _length_ )                            ;sum full_size
    buffers.used                        dd                                      ( _here_ - _base_ - buffers.lenMeta )   ;sum used_size
    buffers.meta                        dd                                      ( buffers.lenMeta )                     ;sum meta_size
    buffers.spam                        dd                                      0x00000000                              ;sum spam_size
    buffers.free                        dd                                      ( _base_ + _length_ - _here_ )          ;sum free_size
    buffers.count                       dd                                      ( _objs_ )                              ;count objects
    xvars                               'echo'
    xvars                               'environment'
    vars                                'main'
   ;xvars                               'files'
    vars                                'yalib'
    vars                                'yapter'
  ;}
  _vars_                                =                                       $
  _alloc_                               =                                       $
  ;( resv )
  ;{
    buffers.save                        aq                                      1                                       ;save of *list while debug
    buffers.saveDebug                   aq                                      1                                       ;save of *list while debug
    buffers.lastPage                    aq                                      1                                       ;last used *page
    buffers.last                        aq                                      1                                       ;last used *buffer
    ;xresv                               'chars'
    xresv                               'echo'
    ;xresv                               'elder'
    xresv                               'environment'
    xresv                               'files'
    xresv                               'time'
;    resv                                'main'
    resv                                'yapter'
  ;}
  display                               'here: 0x'
  displayHex                            ( _here_ )
  display                               10
  _here_                                =                                       _alloc_
  _size_                                =                                       ( _here_ - _base_ )
  _resv_                                =                                       0x8000
  if ( _resv_ > _size_ )
    _size_                              =                                       _resv_
  end if
  if ( _size_ and 0x0000000000000fff )
    _size_                              =                                       (( _size_ + 4096 ) and 0xfffffffffffff000 )
  end if
  if (( _size_ ) > ( buffers.lenFull ))
    display                             'error: lenUsed > maxLenFull!'
  end if
                                        rb                                      ( _base_ + _size_ - $ )
  _length_                              =                                       _size_
  _objs_                                =                                       _cobj_
  display 'stop: 0x'
  displayHex ( $ )
  display 10

segment                                 readable  writeable  gnustack
